---

buffers:
    vg_disassembly:
        command: 'display_disassembly'
        primary_window: true
        language: 'asm'
        on_startup: true
        events:
            after_command:
                - command: 'set_piets'
                  input_args:
                      piet_match_array_variable: 'breakpoints'
                      current_filename_variable: 'vg_disassembly'
                - command: 'set_highlight_line'
                  input_args:
                      highlight_line_variable: 'current_frame_address'
                      current_filename_variable: 'vg_disassembly'
                      match_line_on_string: 'true'
                      match_buffer_on_filename: 'false'


commands:
    display_disassembly:
        steps:
            - run_config_command:
                name: 'list_breakpoints'
                buffer_name: 'vg_breakpoints'
                when: app_entrypoint != None
            - run_config_command:
                name: 'disassemble'
              when: no_program_counter == 0 and app_entrypoint != None
            - run_config_command:
                name: 'run_disassembly_in_range'
              when: no_program_counter == 1 and app_entrypoint != None
    run_disassembly_in_range:
        steps:
            - run_python_function:
                function_file: 'hex_helpers.py'
                function_name: 'check_address_in_range'
                input_args:
                    current_address: '{{ current_frame_address }}'
                    base_address: '{{ base_disassembly_address }}'
                    address_range: '{{ disassemble_frame_range }}'
                set_on_return: 'disassemble_is_in_range'
              when: base_disassembly_address
            - set_var:
                name: 'base_disassembly_address'
                value: '{{ current_frame_address }}'
              when: disassemble_is_in_range == 0 and current_frame_address
            - run_command:
                command: 'disassemble {{ base_disassembly_address }}, {{ base_disassembly_address }}+{{ disassemble_frame_range }}'
                buffer_name: 'vg_disassembly'
              when: disassemble_is_in_range == 0 and current_frame_address
    disassemble:
        steps:
            - run_command:
                command: 'disassemble'
                buffer_name: 'vg_disassembly'
    stepi:
        steps:
            - run_command_with_match:
                command: 'stepi'
                match: '0x[0-9a-f]{2,16}'
                try_set: 'current_frame_address'
    continue:
        steps:
            - run_command_with_match:
                command: 'continue'
                match: '0x[0-9a-f]{2,16}'
                try_set: 'current_frame_address'
    run_user_command:
        steps:
            - run_command:
                command: '{{ user_input_args }}'
